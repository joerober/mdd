- name: Build the topology
  hosts: localhost
  gather_facts: no
  tags:
    - cml
    - network
  tasks:
    - name: Check for the lab file
      stat:
        path: "{{ cml_lab_file }}"
      register: stat_result
      delegate_to: localhost
      run_once: yes

    - assert:
        that:
          - stat_result.stat.exists
          - cml_host != ""
          - cml_username != ""
          - cml_password != ""
          - cml_lab != ""
        msg: "CML host, credentials, and topology file are required.  Verify the requirements in README are met."
      delegate_to: localhost
      run_once: yes

    - name: Create the lab
      cisco.cml.cml_lab:
        host: "{{ cml_host }}"
        user: "{{ cml_username }}"
        password: "{{ cml_password }}"
        lab: "{{ cml_lab }}"
        state: present
        file: "{{ cml_lab_file }}"
      register: results

    - name: Refresh Inventory
      meta: refresh_inventory

    - name: Pause for 1 minute
      pause:
        minutes: 1


- name: Start nodes
  hosts: external_connector:unmanaged_switch:cml_hosts
  connection: local
  gather_facts: no
  tags:
    - start
  tasks:
    - name: Start Nodes
      cisco.cml.cml_node:
        name: "{{ inventory_hostname }}"
        host: "{{ cml_host }}"
        user: "{{ cml_username }}"
        password: "{{ cml_password }}"
        lab: "{{ cml_lab }}"
        state: started

- name: Check initial topology connectivity
  hosts: csr1000v-0
  connection: local
  tags:
    - network
  any_errors_fatal: true
  gather_facts: no
  tasks:
    - name: Wait until the mgmt interface comes up
      cisco.cml.cml_lab_facts:
        host: "{{ cml_host }}"
        user: "{{ cml_username }}"
        password: "{{ cml_password }}"
        lab: "{{ cml_lab }}"
      register: result
      until: result.cml_facts.nodes[inventory_hostname].ansible_host is defined and result.cml_facts.nodes[inventory_hostname].ansible_host
      retries: 60
      delay: 10

    - name: Refresh Inventory
      meta: refresh_inventory

    - name: Ping outside interface of site routers
      ios_ping:
        dest: "{{ hostvars[item].interfaces.GigabitEthernet1.ip.primary | ipaddr('address') }}"
      loop: "{{ groups.site_routers | intersect(groups.cml_hosts) }}"
      register: result
      retries: 60
      delay: 10
      until: result is not failed
      connection: network_cli

    - name: Ping inside interface of site routers
      ios_ping:
        dest: "{{ hostvars[item].interfaces.GigabitEthernet2.ip.primary | ipaddr('address') }}"
      loop: "{{ groups.site_routers | intersect(groups.cml_hosts) }}"
      register: result
      retries: 60
      delay: 10
      until: result is not failed
      connection: network_cli

    # - name: Ping hosts
    #   ios_ping:
    #     dest: "{{ hostvars[item].host_ip | ipaddr('address') }}"
    #   loop: "{{ groups.server | intersect(groups.cml_hosts) }}"
    #   register: result
    #   retries: 60
    #   delay: 10
    #   until: result is not failed
    #   connection: network_cli
